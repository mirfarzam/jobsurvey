{"version":3,"sources":["stores/Store.js","components/CompanyChoiceItem.js","components/CompanySearchInput.js","App.js","serviceWorker.js","index.js"],"names":["store","companyName","index","this","selectedCompanies","indexOf","length","push","splice","value","companies","DATA","filter","name","slice","observable","action","CompanyChoiceItem","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","active","priority","handleClick","bind","assertThisInitialized","event","toggleCompany","setState","_this2","react_default","a","createElement","className","concat","onClick","Component","CompanySearchInput","type","onChange","searchCompany","target","App","observer","map","components_CompanySearchInput","components_CompanyChoiceItem","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ujCAiCeA,EADD,+NAtBIC,GACV,IAAIC,EAAQC,KAAKC,kBAAkBC,QAAQJ,GAC3C,OAAe,IAAXC,GAAgBC,KAAKC,kBAAkBE,QAAU,GACjDH,KAAKC,kBAAkBG,KAAKN,IACrB,GACDC,GAAS,IACfC,KAAKC,kBAAkBI,OAAON,EAAO,IAC9B,yCAMDO,GACPA,EAAMH,OAAS,EACdH,KAAKO,UAAYC,EAAKD,UAAUE,OAAO,SAAAC,GAAI,OAAIA,EAAKR,QAAQI,IAAU,IAEtEN,KAAKO,UAAYC,EAAKD,UAAUI,MAAM,EAAE,4DAtB/CC,6EAA+B,yCAC/BA,6EAAmB,6CACnBA,8EAAuBJ,EAAKD,sDAE5BM,wHAaAA,yFCwBUC,cAzCX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAjB,KAAAc,IACfE,EAAAC,OAAAE,EAAA,EAAAF,CAAAjB,KAAAiB,OAAAG,EAAA,EAAAH,CAAAH,GAAAO,KAAArB,KAAMe,KAEDO,MAAQ,CACTC,QAAS,EACTC,SAAW,MAEfR,EAAKS,YAAcT,EAAKS,YAAYC,KAAjBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAPJA,2EAUPY,GAaJ/B,EAAMgC,cAAc7B,KAAKe,MAAML,OAC/BV,KAAK8B,SAAS,CAAEP,QAAUvB,KAAKsB,MAAMC,0CAKrC,IAAAQ,EAAA/B,KACJ,OACIgC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,gCAAAC,OAAkCpC,KAAKsB,MAAMC,OAAS,YAAc,IAC7Ec,QAAS,SAAAT,GAAK,OAAEG,EAAKN,YAAYG,IACjCJ,SAAUxB,KAAKsB,MAAME,UAErBxB,KAAKe,MAAML,aArCI4B,aCgBjBC,cAdX,SAAAA,EAAYxB,GAAQ,OAAAE,OAAAC,EAAA,EAAAD,CAAAjB,KAAAuC,GAAAtB,OAAAE,EAAA,EAAAF,CAAAjB,KAAAiB,OAAAG,EAAA,EAAAH,CAAAsB,GAAAlB,KAAArB,KACVe,0EAIN,OACIiB,EAAAC,EAAAC,cAAA,4TAEIF,EAAAC,EAAAC,cAAA,SAAOM,KAAM,OAAQC,SAAU,SAAAb,GAAK,OAAE/B,EAAM6C,cAAcd,EAAMe,OAAOrC,kBAVtDgC,aCqDlBM,EA/CdC,+LAIO,OACIb,EAAAC,EAAAC,cAAA,OAAKC,UAAW,aACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,qCACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,kCACZH,EAAAC,EAAAC,cAAA,sEACAF,EAAAC,EAAAC,cAAA,4YACAF,EAAAC,EAAAC,cAAA,UAEQrC,EAAMI,kBAAkB6C,IAAI,SAACpC,GACzB,OACIsB,EAAAC,EAAAC,cAAA,UAAKxB,QAQ7BsB,EAAAC,EAAAC,cAAA,OAAKC,UAAW,qCACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,kCACZH,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAAA,OAAKC,UAAW,eAERtC,EAAMU,UAAUuC,IAAI,SAACpC,GACjB,OACIsB,EAAAC,EAAAC,cAACc,EAAD,CAAmBtC,KAAMA,kBA7BnD4B,iBCEEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.aa87b30c.chunk.js","sourcesContent":["import {observable, action, computed} from 'mobx'\nimport TodoModel from \"./TodoModel\";\nimport DATA from '../data'\n\nclass Store {\n    @observable selectedCompanies = []\n    @observable input = \"\"\n    @observable companies = DATA.companies\n\n    @action\n    toggleCompany(companyName) {\n        let index = this.selectedCompanies.indexOf(companyName)\n        if (index === -1 && this.selectedCompanies.length <= 2) {\n            this.selectedCompanies.push(companyName)\n            return true\n        } else if(index > -1) {\n            this.selectedCompanies.splice(index, 1);\n            return true\n        }\n        return false\n    }\n\n    @action\n    searchCompany(value) {\n        if(value.length > 1) {\n            this.companies = DATA.companies.filter(name => name.indexOf(value) > -1)\n        } else {\n            this.companies = DATA.companies.slice(0,10)\n        }\n    }\n}\n\nconst store = new Store()\nexport default store\n","import React, {Component} from 'react'\nimport store from '../stores/Store'\n\nclass CompanyChoiceItem extends Component{\n\n    constructor(props) {\n        super(props);\n        // Don't call this.setState() here!\n        this.state = {\n            active : false,\n            priority : null\n        };\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick(event){\n        // if(!this.state.active) {\n        //     if (store.addCompany(this.props.name)) {\n        //         this.setState({ priority: store.selectedCompanies.length - 1 });\n        //         this.setState({ active : true });\n        //     } else {\n        //         // Tell user to reached the limit\n        //     }\n        // } else {\n        //     store.removeCompany(this.state.priority)\n        //     this.setState({ priority: null });\n        //     this.setState({ active : false });\n        // }\n        if (store.toggleCompany(this.props.name)) {\n            this.setState({ active : !this.state.active })\n        }\n\n    }\n\n    render(){\n        return (\n            <div className={`company noselect border-pink ${this.state.active ? \"back-pink\" : \"\"}`}\n                 onClick={event=>this.handleClick(event)}\n                 priority={this.state.priority}\n            >\n                {this.props.name}\n            </div>\n        );\n    }\n}\n\nexport default CompanyChoiceItem;\n","import React, {Component} from 'react'\nimport store from '../stores/Store'\n\nclass CompanySearchInput extends Component{\n\n    constructor(props) {\n        super(props);\n    }\n\n    render(){\n        return (\n            <label>\n                لطفا اسم‌ شرکت‌هایی که دوست داری توشون کار کنی رو انتخاب کن!\n                <input type={\"text\"} onChange={event=>store.searchCompany(event.target.value)}/>\n            </label>\n        );\n    }\n}\n\nexport default CompanySearchInput;\n","import React, {Component} from 'react';\nimport {observer} from 'mobx-react'\nimport './App.css';\nimport store from \"./stores/Store\";\nimport CompanyChoiceItem from \"./components/CompanyChoiceItem\";\nimport DATA from './data'\nimport CompanySearchInput from \"./components/CompanySearchInput\";\n\n\n@observer\nclass App extends Component {\n\n    render() {\n        return (\n            <div className={\"container\"}>\n                <div className={\"row d-flex justify-content-center\"}>\n                    <div className={\"col-md-8 col-sm-12 text-center\"}>\n                        <h1>سلام خوبی ؟</h1>\n                        <p>ما به این داده ها نیاز داریم پس جون مادرت این دیتا رو درست پر کن برامون مسلمون</p>\n                        <ol>\n                            {\n                                store.selectedCompanies.map((name)=>{\n                                    return(\n                                        <li>{name}</li>\n                                    )\n                                })\n                            }\n                        </ol>\n                    </div>\n                </div>\n\n                <div className={\"row d-flex justify-content-center\"}>\n                    <div className={\"col-md-8 col-sm-12 text-center\"}>\n                        <form>\n                            <CompanySearchInput />\n                            <div className={\"text-center\"}>\n                                {\n                                    store.companies.map((name)=>{\n                                        return(\n                                            <CompanyChoiceItem name={name}/>\n                                        )\n                                    })\n                                }\n                            </div>\n\n                        </form>\n                    </div>\n                </div>\n\n\n            </div>\n        );\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}